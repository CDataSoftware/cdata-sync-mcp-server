# Smithery configuration file: https://smithery.ai/docs/config#smitheryyaml
# This configuration uses Streamable HTTP transport for Smithery deployment

startCommand:
  type: http
  configSchema:
    # JSON Schema defining the configuration options for the MCP.
    type: object
    properties:
      cdataBaseUrl:
        type: string
        description: CData Sync API endpoint URL (optional, can be configured later)
        default: http://localhost:8181/api.rsc
      cdataAuthToken:
        type: string
        description: CData Sync API authentication token (optional)
      cdataUsername:
        type: string
        description: CData Sync username (for basic auth, optional)
      cdataPassword:
        type: string
        description: CData Sync password (for basic auth, optional)
      debugHttp:
        type: boolean
        default: false
        description: Enable HTTP request/response debugging
      disableSSE:
        type: boolean
        default: false
        description: Disable SSE debug server
  commandFunction:
    # A JS function that produces the CLI command based on the given config to start the MCP on HTTP.
    |-
    (config) => ({
      command: 'node',
      args: ['dist/index.js'],
      env: {
        CDATA_BASE_URL: config.cdataBaseUrl || '',
        CDATA_AUTH_TOKEN: config.cdataAuthToken || '',
        CDATA_USERNAME: config.cdataUsername || '',
        CDATA_PASSWORD: config.cdataPassword || '',
        MCP_TRANSPORT_MODE: 'http',
        MCP_HTTP_PORT: '3000',
        SSE_PORT: '3001',
        DEBUG_HTTP: config.debugHttp?.toString() || 'false',
        DISABLE_SSE: config.disableSSE?.toString() || 'false'
      }
    })
  exampleConfig:
    # All fields are optional - you can connect without any configuration
    # and use the configure_sync_server tool to set up connection later
    cdataBaseUrl: ""
    cdataAuthToken: ""
    debugHttp: false
    disableSSE: true
